// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RecommendationView = (function(_super) {
    __extends(RecommendationView, _super);

    function RecommendationView() {
      _ref = RecommendationView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RecommendationView.prototype.template = '\
      <div>\
      <a class="tip" data-toggle="tooltip" data-placement="right" title="Rate some movies and we&#39;ll provide you with recommendations from similar users!">\
      <div class="row">\
        <div class="col-lg-6">\
          <h2>Your Recommendations</h2>\
        </div>\
        <div id="userBox" class="col-lg-5">\
        </div>\
        <div class="col-lg-1">\
        </div>\
        </div>\
      </a>\
      <div id="container">\
      </div>\
      </div>\
      ';

    RecommendationView.prototype.topUsersTemplate = '<div class="topUsers">\
    </div>';

    RecommendationView.prototype.topRatedTemplate = '<div class="topRated">\
    </div>';

    RecommendationView.prototype.loadingTemplate = '<div class="loading">\
      <i class="icon-spinner icon-spin icon-large"></i> please enter more ratings...\
    </div>';

    RecommendationView.prototype.initialize = function() {
      setTimeout(function() {
        return this.$('.tip').tooltip({
          placement: 'left'
        }).tooltip('show');
      }, 1000);
      this.oldMovies;
      this.initial = false;
      this.$el.append(this.template);
      this.$('#userBox').html('<div class="pull-right">' + this.model.userObj.username + ' <i class="icon-caret-down"></i></div>');
      this.$el.append(this.loadingTemplate);
      this.$('#container').isotope({
        itemSelector: '.element',
        animationEngine: 'jquery'
      });
      return setTimeout(function() {
        return this.$('#container').isotope('reLayout');
      }, 100);
    };

    RecommendationView.prototype.events = {
      "click .element": function(e) {}
    };

    RecommendationView.prototype.handleRating = function(ratingObject) {
      var _this = this;
      _(this.model).extend({
        idFetch: ratingObject.id,
        likeFetch: ratingObject.like
      });
      return this.model.fetch({
        error: function(model, response) {
          return console.log('error model', model);
        },
        success: function(model, response) {
          if (_this.initial === false) {
            _this.handleFirstRating();
            _this.initial = true;
          }
          console.log('success res', response);
          return _this.render(response);
        }
      });
    };

    RecommendationView.prototype.handleFirstRating = function() {
      this.initialRender();
      this.$('.loading').hide('slow');
      return setTimeout(function() {
        return this.$('.tip').tooltip('hide');
      }, 1000);
    };

    RecommendationView.prototype.initialRender = function() {
      this.$el.append(this.topUsersTemplate);
      this.topUsersView = new TopUsersView({
        model: this.model
      });
      this.$('.topUsers').html(this.topUsersView.el);
      this.$el.append(this.topRatedTemplate);
      this.topRatedView = new TopRatedView({
        model: this.model
      });
      return this.$('.topRated').html(this.topRatedView.el);
    };

    RecommendationView.prototype.render = function(res) {
      var index, movieid, moviesToAdd, moviesToRemove, newMovie, removeMovie;
      this.topUsersView.reRender(res);
      this.topRatedView.translateRes(res);
      moviesToAdd = _.difference(res.recommendations, this.oldMovies);
      moviesToRemove = _.difference(this.oldMovies, res.recommendations);
      this.oldMovies = res.recommendations;
      this.$('#container').isotope('shuffle');
      for (index in moviesToAdd) {
        movieid = moviesToAdd[index];
        newMovie = $('<div id="' + movieid + '" class="element sprites ' + this.model.userObj.movieLookup[movieid].replace(/\s+/g, '').toLowerCase() + '">' + this.model.userObj.movieLookup[movieid] + '</div>');
        this.$('#container').isotope('insert', newMovie);
      }
      for (index in moviesToRemove) {
        movieid = moviesToRemove[index];
        removeMovie = this.$('.' + this.model.userObj.movieLookup[movieid].replace(/\s+/g, '').toLowerCase());
        this.$('#container').isotope('remove', removeMovie);
      }
      return this.$('#container').isotope('shuffle');
    };

    return RecommendationView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=RecommendationView.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TopUsersView = (function(_super) {
    __extends(TopUsersView, _super);

    function TopUsersView() {
      _ref = TopUsersView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TopUsersView.prototype.template = '\
      <div>\
      <h2>Most Similar to / Least Similar to</h2>\
      <div id="similarity">\
      </div>\
      </div>\
      ';

    TopUsersView.prototype.initialize = function() {
      this.oldUsers;
      this.$el.append(this.template);
      this.$('#similarity').isotope({
        itemSelector: '.element',
        animationEngine: 'jquery'
      });
      return setTimeout(function() {
        return this.$('#similarity').isotope('reLayout');
      }, 100);
    };

    TopUsersView.prototype.reRender = function(res) {
      var disNewUser, disRemoveUser, disUsersToAdd, disUsersToRemove, index, newUser, removeUser, userid, usersToAdd, usersToRemove;
      console.log(res);
      this.$('#similarity').isotope('shuffle');
      usersToAdd = _.difference(res.similarUsers.slice(0, 3), this.oldUsers);
      usersToRemove = _.difference(this.oldUsers, res.similarUsers.slice(0, 3));
      this.oldUsers = res.similarUsers.slice(0, 3);
      for (index in usersToAdd) {
        userid = usersToAdd[index];
        this.name = this.model.userObj.userLookup[userid] || 'newUser';
        newUser = $('<div id="' + userid + '" class="element user metalloid ' + this.name.replace(/\s+/g, '').toLowerCase() + '">' + this.name + '</div>');
        this.$('#similarity').isotope('insert', newUser);
      }
      for (index in usersToRemove) {
        userid = usersToRemove[index];
        this.nameRemove = this.model.userObj.userLookup[userid] || 'newUser';
        removeUser = this.$('.' + this.nameRemove.replace(/\s+/g, '').toLowerCase());
        this.$('#similarity').isotope('remove', removeUser);
      }
      disUsersToAdd = _.difference(res.similarUsers.slice(-3), this.oldDisUsers);
      disUsersToRemove = _.difference(this.oldDisUsers, res.similarUsers.slice(-3));
      this.oldDisUsers = res.similarUsers.slice(-3);
      for (index in disUsersToAdd) {
        userid = disUsersToAdd[index];
        this.disName = this.model.userObj.userLookup[userid] || 'newUser';
        disNewUser = $('<div id="' + userid + '" class="element user noble-gas nonmetal ' + this.disName.replace(/\s+/g, '').toLowerCase() + '">' + this.disName + '</div>');
        this.$('#similarity').isotope('insert', disNewUser);
      }
      for (index in disUsersToRemove) {
        userid = disUsersToRemove[index];
        this.disNameRemove = this.model.userObj.userLookup[userid] || 'newUser';
        disRemoveUser = this.$('.' + this.disNameRemove.replace(/\s+/g, '').toLowerCase());
        this.$('#similarity').isotope('remove', disRemoveUser);
      }
      return this.$('#similarity').isotope('shuffle');
    };

    return TopUsersView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=TopUsersView.map
*/
